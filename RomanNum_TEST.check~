#include "RomanNum.h"
#include<string.h>

int match;

#test WhenSingleRomanNumIsPassedACharReturnThatChar
	//match = strcmp(RomanNum("I"),"I");	
	//fail_unless(match == 0, "When RomanNum is passed a char it does not returns a char");
	fail_unless(1,"Phase one complete");

#test WhenMultiRomanNumIsPassedTheyAreReturned
	//match = strcmp(RomanNum("XVI"),"XVI");	
	//fail_unless(match == 0, "When RomanNum is passed a char it does not returns a char");
	fail_unless(1,"Phase one complete");

#test TestForCorrectInputFormat
	//match = strcmp(RomanNum("MMMCMXCIXII"),"MMMCMXCIXII");
	//fail_unless(match != 0, "Testing for correct formatting, MMMCMXCIXII is not a valid input due to the two 'I's after the X");
	fail_unless(1,"Phase one complete");

#test FirstAddOfOnePlusOne
	match = strcmp(RomanNum("I","I"), "II");
	fail_unless(match == 0, "Simple add of one plus one");	

#test UnpackAndConcatenateRomanNum
	//match = strcmp(RomanNum("CCCLXIX","DCCCXLV"), "CCCXXXXXXIIIIIIIIICCCCCCCCXXXXIIIII");
	//fail_unless(match == 0, "1st step in adding two roman num's together is to concatenate and then unpack the concatenated number into I X C and M");
	fail_unless(1,"omitting test for 1st step of addition"); 

#test SortTheUnpackedRomanNum
	//match = strcmp(RomanNum("CCCLXIX","DCCCXLV"), "CCCCCCCCCCCXXXXXXXXXXIIIIIIIIIIIIII");
	//fail_unless(match == 0,"2nd step in adding two roman num's is to sort the unpacked num");
	fail_unless(1,"omitting test for 2nd step of addition"); 

#test CompressTheSortedRomanNum
	match = strcmp(RomanNum("CCCLXIX","DCCCXLV"), "MCCXIV");
	fail_unless(match == 0,"3rd and final step of addition, to compress the sorted Roman Num");

#test Subtraction
	match = strcmp(RomanNum("XLIII","CXXIX"), "LXXXVI");
	fail_unless(match == 0,"Subtraction, to Subtraction smaller numeral must be in front of a larger one.");

#test TestingIfProgWillExitIfOver3999
	match = strcmp(RomanNum("MM","MM"), "MMMM");
	fail_unless(match != 0,"Testing if program will give an error if given a number over 3999");
